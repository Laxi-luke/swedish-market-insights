name: CI/CD Pipeline

on:
  push:
    branches: main
  workflow_dispatch:
    branches: main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Load cached dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  check-version-bump-and-release:
    runs-on: ubuntu-latest
    outputs:
      version_bumped: ${{ steps.check-version-bump.outputs.version_bumped }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Install dependencies
        run: poetry install

      - name: Get current version
        id: get-current-version
        run: |
          poetry version --short > current_version.txt
          echo "current_version=$(cat current_version.txt)"

      - name: Get published version
        id: get-published-version
        run: |
          pip install -q --no-cache-dir swedish_market_insights
          pip show swedish_market_insights > package_info.txt
          grep "Version" package_info.txt | awk '{print $2}' > published_version.txt
          echo "current_version=$(cat published_version.txt)"
          
      - name: Check version bump
        id: check-version-bump
        run: |
          current_version=$(cat current_version.txt)
          published_version=$(cat published_version.txt)
          if [[ "$current_version" != "$published_version" ]]; then
            echo "Version bumped from $published_version to $current_version"
            echo "version_bumped=true" >> $GITHUB_ENV
          else
            echo "No version bump"
            echo "version_bumped=false" >> $GITHUB_ENV
          fi
        env:
          VERSION_BUMPED: ${{ env.version_bumped }}

      - name: Create release
        if: env.VERSION_BUMPED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-current-version.outputs.current_version }}
          release_name: Release v${{ steps.get-current-version.outputs.current_version }}
          draft: false
          prerelease: false

  publish:
    needs: check-version-bump-and-release
    if: needs.check-version-bump-and-release.outputs.version_bumped == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: poetry install

      - name: Publish package
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build
